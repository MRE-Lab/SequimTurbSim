function out = simSequimTurbine(velStruct,turbStruct)
% Calculates peak turbine loads and power, and power production for a
% vertical cross flow turbine
%
% velStruct - output velocity information from getSequimPointData
% turbStruct - structure of turbine parameters, with the following fields
%    baseHeight - height of bottom of turbine rotor, m
%    height - turbine rotor height, m
%    diameter - turbine diameters, m
%    cutIn - turbine cut-in velocity, m/s
%    cutOut - turbine cut-out velocity, m/s
%    ratedPower - Max power rating of the turbine, Watts
%       Set to inf for no over/underspeed control
%    Cp - Turbine efficiency
%    Ct - Turbine thrust coefficient
%    Cl - Turbine lift (lateral) coefficient
%
% Output structure fields
%   maxForce - max horizontal force on turbine rotor (N)
%   centerOfMaxForce - vertical location of max force, from seabed (m)
%   maxForceAngle - direction of max force, CCW from X direction (deg)
%   maxThrust - max force in direction of flow (N)
%   maxLift - max force in direction perpendicular to flow (N)
%   maxPower - max power generated by the turbine (Watt)
%   powerTimeSeries - power generated as a function of time (Watt)
%   meanPower - temporal mean power output (Watt)
%   energyGenerated - output over the time period of input data (kWh)
%
% Future To-Do
% - Take in curves of turbine coefficients instead of constants, then
%   calculate forces during over-speed control

rho = 1000;
A = turbStruct.diameter*turbStruct.height;

if turbStruct.baseHeight<velStruct.zq(end-1)
    error('Results will not be accurate for turbine base height less than %f',velStruct.zq(end-1))
end

% turbine rotor height interpolation points
zqr = linspace(turbStruct.baseHeight,turbStruct.baseHeight+turbStruct.height,6);

% calculate horizontal velocity magnitude
uh = sqrt(velStruct.u.^2+velStruct.v.^2);

%% Force Calculations

% calculate flow directions
theta1 = atan2(velStruct.v,velStruct.u);

% interpolate horz velocities and directions onto turbine rotor
uht = interp1(velStruct.zq,uh,zqr);
theta1 = interp1(velStruct.zq,theta1,zqr);

% integrate vel squared and cubed accross the rotor
uht_2 = trapz(zqr,uht.^2);

% find max integrated vel squared (max force time)
[muht_2,mind] = max(uht_2);

% Find center of force on rotor at this point
out.centerOfMaxForce = trapz(zqr,zqr.*uht_2(:,mind))/muht_2;

% max thrust, lift, and total force
out.maxThrust = turbStruct.Ct*0.5*rho*muht_2*A;
out.maxLift = turbStruct.Cl*0.5*rho*muht_2*A;
out.maxForce = sqrt(out.maxThrust.^2+out.maxLift.^2);

% calculate direction of max force vector
theta1m = mean(theta1(:,mind)); % direction of horizontal flow component
theta2 = atan2(out.maxLift,out.maxThrust); % direction of force realative to this
out.maxForceAngle = (theta1m + theta2).*180/pi;

%% Power calculations

uht_3 = trapz(zqr,uht.^3); % integrate horz vel cubed over rotor

% power output timeseries
powerTS = turbStruct.Cp*0.5*rho.*uht_3.*A; % power output if turbine was always spinning

% Max power output of turbine
if max(powerTS)>turbStruct.ratedPower % if rated power is not reached, find max
    out.maxPower = max(powerTS);
else
    out.maxPower = turbStruct.ratedPower;
end

uhtm = mean(uht,1); % mean flow vel on the rotor

% figure out it the turbine starts off spinning or not
if uhtm(1)<uhtm(2) && uhtm(1)<turbStruct.cutIn % increasing vel, below cut in
    spinning = 0; % turbine starts off not spinning
elseif uhtm(1)>uhtm(2) && uhtm(1)<turbStruct.cutOut % deacreasing vel, below cut out
    spinning = 0;
else
    spinning = 1;
end
    
spinLogic = zeros(size(uhtm));
for i = 1:length(uhtm)
    
    if spinning
        % check if below cut out
        if uhtm(i)<turbStruct.cutOut
            spinning = 0;
        else
            spinLogic(i) = 1;
        end
    else
        if uhtm(i)>turbStruct.cutIn
            spinning = 1;
            spinLogic(i) = 1;
        end
    end
end

% Apply spin logic and rated power to power time series
powerTS = powerTS.*spinLogic;
powerTS(powerTS>turbStruct.ratedPower) = turbStruct.ratedPower;
out.powerTimeSeries = powerTS;
out.meanPower = mean(out.powerTimeSeries);

% Calculate energy generated
tHours = (velStruct.t - velStruct.t(1)).*24; % time series in hours
out.energyGenerated = trapz(tHours,out.powerTimeSeries)/1000; % energy out in kWh


